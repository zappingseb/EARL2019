value
i <- 1
Dataset_selector <- object$findElements(type_of_search[i],value[i])
Dataset_selector
if(length(type_of_search)>0){
allowed_elements <- c("xpath","tag","class name","css selector","id","value","name","link text")
if(any(!type_of_search %in% allowed_elements)){
css_property_index <-
which(!type_of_search %in% allowed_elements)
css_properties <- type_of_search[css_property_index]
css_property_values <- value[css_property_index]
type_of_search <- type_of_search[which(type_of_search %in% allowed_elements)]
value <- value[which(type_of_search %in% allowed_elements)]
}
# Loop through all the "class", "tag", "id"... restrictions that shall be searched
# for
for(i in 1:length(type_of_search)){
# for the first search use the in-built function of RSelenium
if(i==1){
Dataset_selector <- object$findElements(type_of_search[i],value[i])
# for all other searches a list has to be checked that could come
# out of the first search
}else{
# create an empty list of entry indexes that could match
keep_ids = c()
# go trough each element
for(j in 1:length(Dataset_selector)){
# Change the search for "class name" to "class"
if(type_of_search[i]=="class name" || type_of_search[i]=="class"){
type_of_search[i]<-"class"
# Split the classes within the "class" attribute
attribute <- strsplit(
Dataset_selector[[j]]$getElementAttribute(
type_of_search[i])[[1]],
" ")[[1]]
}else if(type_of_search[i]=="tag" | type_of_search[i]=="tag name"){
attribute <- Dataset_selector[[j]]$getElementTagName()[[1]]
}else{
attribute <- Dataset_selector[[j]]$getElementAttribute(type_of_search[i])[[1]]
}# IF class search
# Check if the attribute of the element matches the inserted value and
# if the html element is visible to the user
if(value[i] %in% attribute){
if(visibility){
if(Dataset_selector[[j]]$isElementDisplayed()[[1]]){
keep_ids <- c(keep_ids,j)
}
}else{
keep_ids <- c(keep_ids,j)
}# if visibility
}# IF value matches
}# FOR length Dataset_selector
Dataset_selector <- Dataset_selector[keep_ids]
}# IF i==1
}# FOR type_or_search element
}else{
# Just one restriction for the attributes of the webElement is made and it can
# be searched by the RSelenium function
Dataset_selector <- object$findElements(type_of_search,value)
}
Dataset_selector
visibility
Dataset_selector[[1]]$isElementDisplayed()[[1]]
if(length(type_of_search)!=length(value)){
stop("type_of_search and value have to have the same length")
}
# To check for multiple searches the search has to iterate through a character
# vector within the type of search. If length<2 then just a RSelenium function is called
if(length(type_of_search)>0){
allowed_elements <- c("xpath","tag","class name","css selector","id","value","name","link text")
if(any(!type_of_search %in% allowed_elements)){
css_property_index <-
which(!type_of_search %in% allowed_elements)
css_properties <- type_of_search[css_property_index]
css_property_values <- value[css_property_index]
type_of_search <- type_of_search[which(type_of_search %in% allowed_elements)]
value <- value[which(type_of_search %in% allowed_elements)]
}
# Loop through all the "class", "tag", "id"... restrictions that shall be searched
# for
for(i in 1:length(type_of_search)){
# for the first search use the in-built function of RSelenium
if(i==1){
Dataset_selector <- object$findElements(type_of_search[i],value[i])
# for all other searches a list has to be checked that could come
# out of the first search
}else{
# create an empty list of entry indexes that could match
keep_ids = c()
# go trough each element
for(j in 1:length(Dataset_selector)){
# Change the search for "class name" to "class"
if(type_of_search[i]=="class name" || type_of_search[i]=="class"){
type_of_search[i]<-"class"
# Split the classes within the "class" attribute
attribute <- strsplit(
Dataset_selector[[j]]$getElementAttribute(
type_of_search[i])[[1]],
" ")[[1]]
}else if(type_of_search[i]=="tag" | type_of_search[i]=="tag name"){
attribute <- Dataset_selector[[j]]$getElementTagName()[[1]]
}else{
attribute <- Dataset_selector[[j]]$getElementAttribute(type_of_search[i])[[1]]
}# IF class search
# Check if the attribute of the element matches the inserted value and
# if the html element is visible to the user
if(value[i] %in% attribute){
if(visibility){
if(Dataset_selector[[j]]$isElementDisplayed()[[1]]){
keep_ids <- c(keep_ids,j)
}
}else{
keep_ids <- c(keep_ids,j)
}# if visibility
}# IF value matches
}# FOR length Dataset_selector
Dataset_selector <- Dataset_selector[keep_ids]
}# IF i==1
}# FOR type_or_search element
}else{
# Just one restriction for the attributes of the webElement is made and it can
# be searched by the RSelenium function
Dataset_selector <- object$findElements(type_of_search,value)
}
if (!is.null(text)){
# Check the elements to contain a certain text
Dataset_selector <- compare_element_by_text(Dataset_selector,text,find, visibility)
}
if(visibility && length(Dataset_selector)>0){
keep_ids = c()
for(j in 1:length(Dataset_selector)){
if(Dataset_selector[[j]]$isElementDisplayed()[[1]]){
keep_ids <- c(keep_ids,j)
}
}
Dataset_selector <- Dataset_selector[keep_ids]
}
if(length(css_properties)>0 && length(css_properties)==length(css_property_values)){
Dataset_selector <- compare_element_by_css(Dataset_selector,
css_properties,
css_property_values)
}
Dataset_selector
sink()
Dataset_selector
type_of_search
for(i in 1:length(type_of_search)){
# for the first search use the in-built function of RSelenium
if(i==1){
Dataset_selector <- object$findElements(type_of_search[i],value[i])
# for all other searches a list has to be checked that could come
# out of the first search
}else{
# create an empty list of entry indexes that could match
keep_ids = c()
# go trough each element
for(j in 1:length(Dataset_selector)){
# Change the search for "class name" to "class"
if(type_of_search[i]=="class name" || type_of_search[i]=="class"){
type_of_search[i]<-"class"
# Split the classes within the "class" attribute
attribute <- strsplit(
Dataset_selector[[j]]$getElementAttribute(
type_of_search[i])[[1]],
" ")[[1]]
}else if(type_of_search[i]=="tag" | type_of_search[i]=="tag name"){
attribute <- Dataset_selector[[j]]$getElementTagName()[[1]]
}else{
attribute <- Dataset_selector[[j]]$getElementAttribute(type_of_search[i])[[1]]
}# IF class search
# Check if the attribute of the element matches the inserted value and
# if the html element is visible to the user
if(value[i] %in% attribute){
if(visibility){
if(Dataset_selector[[j]]$isElementDisplayed()[[1]]){
keep_ids <- c(keep_ids,j)
}
}else{
keep_ids <- c(keep_ids,j)
}# if visibility
}# IF value matches
}# FOR length Dataset_selector
Dataset_selector <- Dataset_selector[keep_ids]
}# IF i==1
}# FOR type_or_search element
}else{
# Just one restriction for the attributes of the webElement is made and it can
# be searched by the RSelenium function
Dataset_selector <- object$findElements(type_of_search,value)
}
source('C:/_wolfs25/git/EARL2019/RSelenium/test.app.RSeleniumTest.R')
source('C:/_wolfs25/git/EARL2019/RSelenium/test.app.RSeleniumTest.R')
source('C:/_wolfs25/git/EARL2019/RSelenium/test.app.RSeleniumTest.R')
move_mouse
move_mouse
sink()
move_mouse
as.logica(1)
as.logical(1)
as.logical("1")
as.logical("TRUE")
source('C:/_wolfs25/git/EARL2019/RSelenium/test.app.RSeleniumTest.R')
end_app(process_app)
source('C:/_wolfs25/git/EARL2019/RSelenium/test.app.RSeleniumTest.R')
process_app <- start_app(port = 1212, path = getwd())
source('C:/_wolfs25/git/EARL2019/RSelenium/test.app.RSeleniumTest.R')
source('C:/_wolfs25/git/EARL2019/RSelenium/test.app.RSeleniumTest.R')
source('C:/_wolfs25/git/EARL2019/RSelenium/test.app.RSeleniumTest.R')
source('C:/_wolfs25/git/EARL2019/RSelenium/test.app.RSeleniumTest.R')
source('C:/_wolfs25/git/EARL2019/RSelenium/test.app.RSeleniumTest.R')
process_app <- start_app(port = 1212, path = getwd())
RTest::xmlWriteData_data.frame(elemname = "data", data = read.csv("testfiles/AGEVITAMINDCOUNTRYRACE.csv"))
RTest::xmlWriteData_data.frame(elemname = "reference", data = read.csv("testfiles/AGEVITAMINDCOUNTRYRACE.csv"))
source('C:/_wolfs25/git/EARL2019/RSelenium/test.app.RSeleniumTest.R')
end_app(process_app)
source('C:/_wolfs25/git/EARL2019/RSelenium/test.app.RSeleniumTest.R')
source('C:/_wolfs25/git/EARL2019/RSelenium/test.app.RSeleniumTest.R')
source('C:/_wolfs25/git/EARL2019/RSelenium/test.app.RSeleniumTest.R')
end_app(process_app)
source('C:/_wolfs25/git/EARL2019/RSelenium/test.app.RSeleniumTest.R')
process_app <- start_app(port = 1212, path = getwd())
end_app(process_app)
source('C:/_wolfs25/git/EARL2019/RSelenium/test.app.RSeleniumTest.R')
source('C:/_wolfs25/git/EARL2019/RSelenium/test.app.RSeleniumTest.R')
source('C:/_wolfs25/git/EARL2019/RSelenium/test.app.RSeleniumTest.R')
end_app(process_app)
source('C:/_wolfs25/git/EARL2019/RSelenium/test.app.RSeleniumTest.R')
source('C:/_wolfs25/git/EARL2019/RSelenium/test.app.RSeleniumTest.R')
source('C:/_wolfs25/git/EARL2019/RSelenium/test.app.RSeleniumTest.R')
source('C:/_wolfs25/git/EARL2019/RSelenium/test.app.RSeleniumTest.R')
source('C:/_wolfs25/git/EARL2019/RSelenium/test.app.RSeleniumTest.R')
end_app(process_app)
source('C:/_wolfs25/git/EARL2019/RSelenium/test.app.RSeleniumTest.R')
shiny::runApp('C:/_wolfs25/git/EARL2019/shinytest')
runApp('C:/_wolfs25/git/EARL2019/shinytest')
runApp('C:/_wolfs25/git/EARL2019/shinytest')
runApp('C:/_wolfs25/git/EARL2019/shinytest')
runApp('C:/_wolfs25/git/EARL2019/shinytest')
runApp('C:/_wolfs25/git/EARL2019/shinytest')
runApp('C:/_wolfs25/git/EARL2019/shinytest')
runApp('C:/_wolfs25/git/EARL2019/shinytest')
runApp('C:/_wolfs25/git/EARL2019/shinytest')
runApp('C:/_wolfs25/git/EARL2019/shinytest')
runApp('C:/_wolfs25/git/EARL2019/shinytest')
runApp('C:/_wolfs25/git/EARL2019/shinytest')
runApp('C:/_wolfs25/git/EARL2019/shinytest')
runApp('C:/_wolfs25/git/EARL2019/shinytest')
input$data_columns
as.formula(paste(as.symbol(input$data_columns), collapse = "~"))
as.formula(paste(as.name(input$data_columns), collapse = "~"))
as.formula(paste(input$data_columns, collapse = "~"))
dcast(df, as.formula(paste(input$data_columns, collapse = "~")))
tidyr::gather(df, condition, measurement, factor_key=TRUE)
runApp('C:/_wolfs25/git/EARL2019/shinytest')
tidyr::gather(df, condition, measurement, factor_key=TRUE)
data_long <- tidyr::gather(df, condition, measurement, factor_key=TRUE)
ggplot(data_long) +
geom_boxplot(aes(y = measurement, fill = condition))
runApp('C:/_wolfs25/git/EARL2019/shinytest')
summary(data_filtered())
summary(data_filtered())
class(summary(data_filtered()))
as.data.frame(summary(data_filtered()))
spread(as.data.frame(summary(data_filtered())), Var2, Freq)
spread(as.data.frame(summary(data_filtered())) %>% tibble::rowid_to_column(), Var2, Freq)
spread(as.data.frame(summary(data_filtered())), Var2)
spread(as.data.frame(summary(data_filtered())), Freq)
summarize(group_by(data_long, condition), mean=mean(value), sd=sd(value))
data_long <- tidyr::gather(df, condition, measurement, factor_key=TRUE)
summarize(group_by(data_long, condition), mean=mean(value), sd=sd(value))
dplyr::summarize(dplyr::group_by(data_long, condition), mean=mean(value), sd=sd(value))
data_long <- tidyr::gather(df, condition, measurement, factor_key=TRUE)
data_long <- tidyr::gather(data_filtered(), condition, measurement, factor_key=TRUE)
dplyr::summarize(dplyr::group_by(data_long, condition), mean=mean(value), sd=sd(value))
dplyr::summarize(dplyr::group_by(data_long, condition), mean=mean(measurement), sd=sd(measurement))
p <- c(0.25, 0.75)
p_names <- map_chr(p, ~paste0(.x*100, "%"))
p_funs <- map(p, ~partial(quantile, probs = .x, na.rm = TRUE)) %>%
set_names(nm = p_names)
dplyr::summarize(dplyr::group_by(data_filtered_long(), condition),
Mean=mean(measurement),
SD=sd(measurement),
Median = median(measurement),
funs(!!!p_funs)
)
dplyr::summarize(dplyr::group_by(data_long, condition),
Mean=mean(measurement),
SD=sd(measurement),
Median = median(measurement),
funs(!!!p_funs)
)
p <- c(0.25, 0.75)
p
p_funs <- map(p, ~partial(quantile, probs = .x, na.rm = TRUE)) %>%
set_names(nm = p_names)
p_funs <- purrr::map(p, ~partial(quantile, probs = .x, na.rm = TRUE)) %>%
set_names(nm = p_names)
p_funs <- purrr::map(p, ~purrr::partial(quantile, probs = .x, na.rm = TRUE)) %>%
set_names(nm = p_names)
p_funs <- purrr::map(p, ~purrr::partial(quantile, probs = .x, na.rm = TRUE)) %>%
purrr::set_names(nm = p_names)
p_names <- map_chr(p, ~paste0(.x*100, "%"))
p_names <- purrr::map_chr(p, ~paste0(.x*100, "%"))
p_funs <- purrr::map(p, ~purrr::partial(quantile, probs = .x, na.rm = TRUE)) %>%
purrr::set_names(nm = p_names)
p_funs
dplyr::summarize(dplyr::group_by(data_long, condition),
Mean=mean(measurement),
SD=sd(measurement),
Median = median(measurement),
funs(!!!p_funs)
)
dplyr::summarize(dplyr::group_by(data_long, condition),
Mean=mean(measurement),
SD=sd(measurement),
Median = median(measurement),
purrr::funs(!!!p_funs)
)
dplyr::funs(!!!p_funs)
dplyr::summarize(dplyr::group_by(data_long, condition),
Mean=mean(measurement),
SD=sd(measurement),
Median = median(measurement),
dplyr::funs(!!!p_funs)
)
dplyr::summarize(dplyr::group_by(data_long, condition),
Mean=mean(measurement),
SD=sd(measurement),
Median = median(measurement),
dplyr::funs(!!!p_funs)
)
dplyr::funs(!!!p_funs)
dplyr::summarize(dplyr::group_by(data_long, condition),
dplyr::funs(!!!p_funs)
)
dplyr::summarize(dplyr::group_by(data_long, condition),
Mean=mean(measurement),
SD=sd(measurement),
Median = median(measurement),
Q25 = quantile(measurement, probs = 0.25),
Q25 = quantile(measurement, probs = 0.75)
)
dplyr::summarize(dplyr::group_by(data_long, condition),
Mean=mean(measurement),
SD=sd(measurement),
Median = median(measurement),
Q25 = quantile(measurement, probs = 0.25),
Q75 = quantile(measurement, probs = 0.75)
)
runApp('C:/_wolfs25/git/EARL2019/shinytest')
runApp('C:/_wolfs25/git/EARL2019/shinytest')
data_filtered_long()
vapply(2:seq_along(input$data_colums), function(x){
as.character(var.test(
x = data_filtered_long()[which(data_filtered_long()$samples) == input$data_colums[x-1], "measurement"],
y = data_filtered_long()[which(data_filtered_long()$samples) == input$data_colums[x], "measurement"],
alternative = "two.sided"))
}, character(1))
seq_along(input$data_colums)
input$data_colums
seq_along(input$data_columns)
vapply(2:length(input$data_columns), function(x){
as.character(var.test(
x = data_filtered_long()[which(data_filtered_long()$samples) == input$data_colums[x-1], "measurement"],
y = data_filtered_long()[which(data_filtered_long()$samples) == input$data_colums[x], "measurement"],
alternative = "two.sided"))
}, character(1))
vapply(2:length(input$data_columns), function(x){
as.character(var.test(
x = data_filtered_long()[which(data_filtered_long()$samples) == input$data_colums[x-1]), "measurement"],
y = data_filtered_long()[which(data_filtered_long()$samples) == input$data_colums[x]), "measurement"],
alternative = "two.sided"))
}, character(1))
vapply(2:length(input$data_columns), function(x){
as.character(var.test(
x = data_filtered_long()[which(data_filtered_long()$samples == input$data_colums[x-1]), "measurement"],
y = data_filtered_long()[which(data_filtered_long()$samples == input$data_colums[x]), "measurement"],
alternative = "two.sided"))
}, character(1))
x <- 2
data_filtered_long()[which(data_filtered_long()$samples == input$data_colums[x-1]), "measurement"]
vapply(2:length(input$data_columns), function(x){
as.character(var.test(
x = data_filtered_long()[which(data_filtered_long()$samples == input$data_columns[x-1]), "measurement"],
y = data_filtered_long()[which(data_filtered_long()$samples == input$data_columns[x]), "measurement"],
alternative = "two.sided"))
}, character(1))
data_filtered_long()[which(data_filtered_long()$samples == input$data_columns[x-1]), "measurement"]
data_filtered_long()[which(data_filtered_long()$samples == input$data_columns[x]), "measurement"]
var.test(
x = data_filtered_long()[which(data_filtered_long()$samples == input$data_columns[x-1]), "measurement"],
y = data_filtered_long()[which(data_filtered_long()$samples == input$data_columns[x]), "measurement"],
alternative = "two.sided")
var.test(
x = data_filtered_long()[which(data_filtered_long()$samples == input$data_columns[x-1]), "measurement"],
y = data_filtered_long()[which(data_filtered_long()$samples == input$data_columns[x]), "measurement"],
alternative = "two.sided")
s <-var.test(
x = data_filtered_long()[which(data_filtered_long()$samples == input$data_columns[x-1]), "measurement"],
y = data_filtered_long()[which(data_filtered_long()$samples == input$data_columns[x]), "measurement"],
alternative = "two.sided")
s$statistic
s$p.value
var.test(
x = data_filtered_long()[which(data_filtered_long()$samples == input$data_columns[x-1]), "measurement"],
y = data_filtered_long()[which(data_filtered_long()$samples == input$data_columns[x]), "measurement"],
alternative = "two.sided")[c("statistic", "p.value")]
vapply(2:length(input$data_columns), function(x){
paste(
var.test(
x = data_filtered_long()[which(data_filtered_long()$samples == input$data_columns[x-1]), "measurement"],
y = data_filtered_long()[which(data_filtered_long()$samples == input$data_columns[x]), "measurement"],
alternative = "two.sided")[c("statistic", "p.value")],
collapse = ","
)
}, character(1))
unname(var.test(
x = data_filtered_long()[which(data_filtered_long()$samples == input$data_columns[x-1]), "measurement"],
y = data_filtered_long()[which(data_filtered_long()$samples == input$data_columns[x]), "measurement"],
alternative = "two.sided")[c("statistic", "p.value")])
paste(
unname(var.test(
x = data_filtered_long()[which(data_filtered_long()$samples == input$data_columns[x-1]), "measurement"],
y = data_filtered_long()[which(data_filtered_long()$samples == input$data_columns[x]), "measurement"],
alternative = "two.sided")[c("statistic", "p.value")]),
collapse = ","
)
unname(var.test(
x = data_filtered_long()[which(data_filtered_long()$samples == input$data_columns[x-1]), "measurement"],
y = data_filtered_long()[which(data_filtered_long()$samples == input$data_columns[x]), "measurement"],
alternative = "two.sided")[c("statistic", "p.value")])
var.test(
x = data_filtered_long()[which(data_filtered_long()$samples == input$data_columns[x-1]), "measurement"],
y = data_filtered_long()[which(data_filtered_long()$samples == input$data_columns[x]), "measurement"],
alternative = "two.sided")[c("statistic", "p.value")]
lapply(2:length(input$data_columns), function(x){
var.test(
x = data_filtered_long()[which(data_filtered_long()$samples == input$data_columns[x-1]), "measurement"],
y = data_filtered_long()[which(data_filtered_long()$samples == input$data_columns[x]), "measurement"],
alternative = "two.sided")
})
f_statistics[[1]]$statistics
f_statistics[[1]]$statistic
f_statistics <- lapply(2:length(input$data_columns), function(x){
var.test(
x = data_filtered_long()[which(data_filtered_long()$samples == input$data_columns[x-1]), "measurement"],
y = data_filtered_long()[which(data_filtered_long()$samples == input$data_columns[x]), "measurement"],
alternative = "two.sided")
})
f_statistics[[1]]$statistic
f_statistics[[1]]$p.value
paste(unlist(lapply(f_statistics, function(x){
paste("F = ", unname(x$statistic), " p value = ", unname(x$p.value))
})), collapse = "\n")
f_statistics[[1]]$parameter
f_statistics <- lapply(2:length(input$data_columns), function(x){
append(
var.test(
x = data_filtered_long()[which(data_filtered_long()$samples == input$data_columns[x-1]), "measurement"],
y = data_filtered_long()[which(data_filtered_long()$samples == input$data_columns[x]), "measurement"],
alternative = "two.sided"),
list(
x = input$data_columns[x-1],
y = input$data_columns[x]
)
)
})
f_statistics
paste(unlist(lapply(f_statistics, function(x){
paste("F = ", unname(x$statistic), ", p value = ", unname(x$p.value), "X, Y = ", x$x, x$y)
})), collapse = "\n")
paste(unlist(lapply(f_statistics, function(x){
paste("F = ", unname(x$statistic), ", p value = ", unname(x$p.value), "X, Y = ", x$x,",", x$y)
})), collapse = "\n")
paste(unlist(lapply(f_statistics, function(x){
paste("F = ", unname(x$statistic), ", p value = ", unname(x$p.value), ", X/Y = ", x$x,",", x$y)
})), collapse = "\n")
runApp('C:/_wolfs25/git/EARL2019/shinytest')
runApp('C:/_wolfs25/git/EARL2019/shinytest')
mean_results
x <- 2
mean(data_filtered_long()[which(data_filtered_long()$samples == input$data_columns[x]), ])
mean_results <- lapply(2:length(input$data_columns), function(x){
append(
list(mean_compare = mean(data_filtered_long()[which(data_filtered_long()$samples == input$data_columns[x]), "measurement"]) <
1.2 * mean(data_filtered_long()[which(data_filtered_long()$samples == input$data_columns[1]), "measurement"]) &&
mean(data_filtered_long()[which(data_filtered_long()$samples == input$data_columns[x]), "measurement"]) >
0.8 * mean(data_filtered_long()[which(data_filtered_long()$samples == input$data_columns[1]), "measurement"])
),
list(
x = input$data_columns[1],
y = input$data_columns[x]
)
)
})
mean_results
mean_results <- lapply(2:length(input$data_columns), function(x){
append(
list(mean_compare = mean(data_filtered_long()[which(data_filtered_long()$samples == input$data_columns[x]), "measurement"], na.rm = T) <
1.2 * mean(data_filtered_long()[which(data_filtered_long()$samples == input$data_columns[1]), "measurement"], na.rm = T) &&
mean(data_filtered_long()[which(data_filtered_long()$samples == input$data_columns[x]), "measurement"], na.rm = T) >
0.8 * mean(data_filtered_long()[which(data_filtered_long()$samples == input$data_columns[1]), "measurement"], na.rm = T)
),
list(
x = input$data_columns[1],
y = input$data_columns[x]
)
)
})
runApp('C:/_wolfs25/git/EARL2019/shinytest')
runApp('C:/_wolfs25/git/EARL2019/shinytest')
runApp('C:/_wolfs25/git/EARL2019/shinytest')
