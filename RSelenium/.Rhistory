library(shiny)
.libPaths(.libPaths()[2])
library(shiny)
.libpaths()
.libPaths()
library(shiny)
library(shiny)
.libPaths()
.libPaths("C:/RVersions/R-3.5.2/library")
library(shiny)
runApp()
runApp()
runApp()
?rexp
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
pat_data <- list(
SUBJID = 1:200,
STUDYID = c(rep(1, 40), rep(2, 100), rep(3, 60)),
AGE = sample(20:88, 200, replace = T) %>% as.numeric(),
SEX = c(sample(c("M", "F"), 180, replace = T), rep("U", 20)) %>% as.factor(),
RACE = sample(c("ASIAN", "AMERICAN", "AFRO AMERICAN"), 200, replace = T) %>% as.factor(),
VITAMIND = rexp(200, 1 / 100) %>% as.numeric(),
COUNTRY = sample(c("CHINA", "US", "GER", "FRA"), 200, replace = T) %>% as.factor(),
BIOMARKER1 = rexp(200, 1 / 80) %>% as.numeric()
) %>% as_tibble()
pat_data$SEX
pat_data$RACE
pat_data$COUNTRY
runApp()
ggplot2::ggplot(data = pat_data) + ggmosaic::geom_mosaic(aes(x = product(RACE, SEX), fill = COUNTRY))
ggplot2::ggplot(data = pat_data) + ggmosaic::geom_mosaic(aes(x = ggmosaic::product(RACE, SEX), fill = COUNTRY))
ggplot2::ggplot(data = pat_data) + ggmosaic::geom_mosaic(aes(x = ggmosaic::product(RACE), fill = COUNTRY))
ggplot2::ggplot(data = pat_data) + ggmosaic::geom_mosaic(aes(x = ggmosaic::product(SEX), fill = COUNTRY))
ggplot2::ggplot(data = pat_data) + ggmosaic::geom_mosaic(aes(x = ggmosaic::product(SEX), fill = as.character(COUNTRY)))
ggplot2::ggplot(data = pat_data) + ggmosaic::geom_mosaic(aes(x = ggmosaic::product(SEX))
)
ggplot2::ggplot(data = pat_data) + ggmosaic::geom_mosaic(aes(x = SEX))
names(pat_data)
ggplot2::ggplot(data = as.data.frame(pat_data)) + ggmosaic::geom_mosaic(aes(x = SEX))
ggplot2::ggplot(data = as.data.frame(pat_data)) + ggmosaic::geom_mosaic(aes(x = RACE))
ggplot2::ggplot(data = pat_data) + ggmosaic::geom_mosaic(aes(x = ggmosaic::product(AGE), fill = as.character(COUNTRY)))
ggplot2::ggplot(data = pat_data) + ggmosaic::geom_mosaic(aes(x = ggmosaic::product(AGE), fill = as.character(AGE)))
class(pat_data$AGE)
ggplot2::ggplot(data = pat_data) + ggmosaic::geom_mosaic(aes(x = ggmosaic::product(AGE), fill = AGE))
ggplot2::ggplot(data = pat_data) + ggmosaic::geom_mosaic(aes(x = ggmosaic::product(SUBJID), fill = AGE))
ggplot2::ggplot(data = pat_data) + ggmosaic::geom_mosaic(aes(x = ggmosaic::product(AGE), fill = COUNTRY))
ggplot2::ggplot(data = pat_data) + ggmosaic::geom_mosaic(aes(weight = AGE, x = ggmosaic::product(AGE), fill = COUNTRY))
ggplot2::ggplot(data = pat_data) + ggmosaic::geom_mosaic(aes(x = ggmosaic::product(SEX), fill = SEX))
ggplot2::ggplot(data = pat_data) + ggmosaic::geom_mosaic(aes(x = ggmosaic::product(SEX), fill = SEX), na.rm = T)
ggplot2::ggplot(data = as.data.frame(pat_data)) + ggmosaic::geom_mosaic(aes(x = ggmosaic::product(SEX), fill = SEX), na.rm = T)
pat_data_df <- as.data.frame(pat_data, stringsAsFactors = FALSE)
ggplot2::ggplot(data = pat_data_df) + ggmosaic::geom_mosaic(aes(x = ggmosaic::product(SEX), fill = SEX), na.rm = T)
class(pat_data_df$SEX)
pat_data_df$SEX <- as.character(pat_data_df$SEX)
ggplot2::ggplot(data = pat_data_df) + ggmosaic::geom_mosaic(aes(x = ggmosaic::product(SEX), fill = SEX), na.rm = T)
library(ggmosaic)
ggplot2::ggplot(data = pat_data_df) + ggmosaic::geom_mosaic(aes(x = ggmosaic::product(SEX), fill = SEX), na.rm = T)
runApp()
runApp()
?facet_grid
?vars_string
runApp()
is.factor(pat_data["RACE"])
is.character(pat_data["RACE"])
class(pat_data["RACE"])
class(pat_data[["RACE"]])
class(pat_data[[c("RACE", "SEX"]])
class(pat_data[[c("RACE", "SEX")]])
pat_data[[c("RACE", "SEX")]]
runApp()
runApp()
vapply(
X = columns_y(),
FUN = function(x) is.factor(pat_data[x]),
logical(1))
vapply(
X = columns_y(),
FUN = function(x) is.factor(pat_data[[x]]),
logical(1))
runApp()
?grid.arrange
??grid.arrange
runApp()
styler::style_file("app.R")
runApp()
runApp()
runApp()
install.packages(c("shiny","devtools","tibble", "dplyr", "tidyr", "ggplot2", "gridExtra", "ggmosaic", "RSelenium", "shinytest"))
install.packages("styler")
styler::style_file("test_utils.R")
Sys.getenv("JAVA_HOME")
source('C:/_wolfs25/git/EARL2019/RSelenium/test_utils.R')
start_selenium(url = "http://www.web.de")
library(RSelenium)
start_selenium(url = "http://www.web.de")
install.packages("XML")
source('C:/_wolfs25/git/EARL2019/RSelenium/test_utils.R')
table_out
write.csv(x = table_out, file = "testfiles/AGECOUNTRYRACE.csv")
source('C:/_wolfs25/git/EARL2019/RSelenium/test.app.R')
source('C:/_wolfs25/git/EARL2019/RSelenium/test.app.R')
p$get_status()
p$kill()
p <- NULL
rm(list=ls())
source('C:/_wolfs25/git/EARL2019/RSelenium/test.app.R')
source('C:/_wolfs25/git/EARL2019/RSelenium/utils.test.R')
source('C:/_wolfs25/git/EARL2019/RSelenium/test.app.R')
port = 1235
?runApp
??runApp
?shiny::runApp
start_app <- function(port = 1235){
p <- withr::with_envvar(
c("R_TESTS" = NA),
callr::r_bg(function(path){
do.call(shiny::runApp, list(appDir = path, port = port))
}, supervise = TRUE, args = list(path = getwd(), port = port))
)
Sys.sleep(2)
p$get_status()
}
start_app()
getwd()
callr::r_bg(function(path){
do.call(shiny::runApp, list(appDir = path, port = port))
}, supervise = TRUE, args = list(path = getwd(), port = port))
p$get_status()
p <- withr::with_envvar(
c("R_TESTS" = NA),
callr::r_bg(function(path){
do.call(shiny::runApp, list(appDir = path, port = port))
}, supervise = TRUE, args = list(path = getwd(), port = port))
)
p$get_status()
p$get_status()
p$kill()
start_app <- function(port = 1235, path = getwd()){
p <- withr::with_envvar(
c("R_TESTS" = NA),
callr::r_bg(function(path){
do.call(shiny::runApp, list(appDir = path, port = port))
}, supervise = TRUE, args = list(path = path, port = port))
)
Sys.sleep(2)
p$kill()
}
start_app <- function(port = 1235, path = getwd()){
p <<- withr::with_envvar(
c("R_TESTS" = NA),
callr::r_bg(function(path){
do.call(shiny::runApp, list(appDir = path, port = port))
}, supervise = TRUE, args = list(path = path, port = port))
)
Sys.sleep(2)
p$get_status()
}
start_app()
p$kill()
p <- NULL
path = getwd()
patzh
path
do.call(shiny::runApp, list(appDir = path, port = port)
)
source('C:/_wolfs25/git/EARL2019/RSelenium/test.app.R')
p <- NULL
source('C:/_wolfs25/git/EARL2019/RSelenium/test.app.R')
source('C:/_wolfs25/git/EARL2019/RSelenium/test.app.R')
withr::with_envvar(
c("R_TESTS" = NA),
callr::r_bg(function(path, port){
do.call(shiny::runApp, list(appDir = path, port = port))
}, supervise = TRUE, args = list(path = path, port = port))
)
path <- getwd()
port <- 1234
withr::with_envvar(
c("R_TESTS" = NA),
callr::r_bg(function(path, port){
do.call(shiny::runApp, list(appDir = path, port = port))
}, supervise = TRUE, args = list(path = path, port = port))
)
p$get_status()
p <- withr::with_envvar(
c("R_TESTS" = NA),
callr::r_bg(function(path, port){
do.call(shiny::runApp, list(appDir = path, port = port))
}, supervise = TRUE, args = list(path = path, port = port))
)
p$get_status()
port <- 1237
p <- withr::with_envvar(
c("R_TESTS" = NA),
callr::r_bg(function(path, port){
do.call(shiny::runApp, list(appDir = path, port = port))
}, supervise = TRUE, args = list(path = path, port = port))
)
p$get_status()
source('C:/_wolfs25/git/EARL2019/RSelenium/test.app.R')
drag_dop("SEX","x_columns")
drag_drop("SEX","x_columns")
drag_drop <- function(id_drag, id_target, remDr = get("remDr", parent.frame())){
remDr$executeScript(paste0(
'simulateDragDrop(document.getElementById("',
id_drag,
'"), document.getElementById("',
id_target,
'"))'
))
}
drag_drop("SEX","x_columns")
process_r$kill()
remDr$close()
source('C:/_wolfs25/git/EARL2019/RSelenium/test.app.R')
table_out
table_test <- read.csv("testfiles/AGEVITAMINDCOUNTRYRACE.csv")
identical(table_out, table_test)
names(table_out)
names(table_test)
write.csv(table_out, "testfiles/AGEVITAMINDCOUNTRYRACE.csv", row.names = F)
table_test <- read.csv("testfiles/AGEVITAMINDCOUNTRYRACE.csv")
identical(table_out, table_test)
names(table_out)
names(table_test)
table_test <- read.csv("testfiles/AGEVITAMINDCOUNTRYRACE.csv", stringsAsFactors = F)
identical(table_out, table_test)
identical(table_out$AGE, table_test$AGE)
View(data.frame(table_out$AGE, table_test$AGE))
identical(unlist(table_out$AGE), unlist(table_test$AGE))
identical(as.numeric(table_out$AGE), as.numeric(table_test$AGE))
identical(as.character(table_out$AGE), as.character(table_test$AGE))
all(dim(table_test) == dim(table_out))
lapply(names(table_test), function(x) identical(as.character(table_out[, x]), as.character(table_test[, x])))
source('C:/_wolfs25/git/EARL2019/RSelenium/test.app.R')
styler::style_file("test.app.R")
source('C:/_wolfs25/git/EARL2019/RSelenium/test.app.R')
